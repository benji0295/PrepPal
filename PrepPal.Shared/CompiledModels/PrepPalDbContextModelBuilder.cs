// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace PrepPal.Data.CompiledModels
{
    public partial class PrepPalDbContextModel
    {
        partial void Initialize()
        {
            var aisle = AisleEntityType.Create(this);
            var ingredient = IngredientEntityType.Create(this);
            var instruction = InstructionEntityType.Create(this);
            var recipe = RecipeEntityType.Create(this);
            var recipeCategory = RecipeCategoryEntityType.Create(this);
            var recipeIngredient = RecipeIngredientEntityType.Create(this);
            var storageLocation = StorageLocationEntityType.Create(this);
            var unitOfMeasure = UnitOfMeasureEntityType.Create(this);

            InstructionEntityType.CreateForeignKey1(instruction, recipe);
            RecipeCategoryEntityType.CreateForeignKey1(recipeCategory, recipe);
            RecipeIngredientEntityType.CreateForeignKey1(recipeIngredient, recipe);

            AisleEntityType.CreateAnnotations(aisle);
            IngredientEntityType.CreateAnnotations(ingredient);
            InstructionEntityType.CreateAnnotations(instruction);
            RecipeEntityType.CreateAnnotations(recipe);
            RecipeCategoryEntityType.CreateAnnotations(recipeCategory);
            RecipeIngredientEntityType.CreateAnnotations(recipeIngredient);
            StorageLocationEntityType.CreateAnnotations(storageLocation);
            UnitOfMeasureEntityType.CreateAnnotations(unitOfMeasure);

            AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            AddAnnotation("ProductVersion", "8.0.8");
            AddAnnotation("Relational:MaxIdentifierLength", 63);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var aisle = FindEntityType("PrepPal.Models.Aisle")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            aisle.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var prepPalModelsAisleTableBase = new TableBase("PrepPal.Models.Aisle", null, relationalModel);
            var aisleIdColumnBase = new ColumnBase<ColumnMappingBase>("AisleId", "integer", prepPalModelsAisleTableBase);
            prepPalModelsAisleTableBase.Columns.Add("AisleId", aisleIdColumnBase);
            var aisleNameColumnBase = new ColumnBase<ColumnMappingBase>("AisleName", "text", prepPalModelsAisleTableBase);
            prepPalModelsAisleTableBase.Columns.Add("AisleName", aisleNameColumnBase);
            relationalModel.DefaultTables.Add("PrepPal.Models.Aisle", prepPalModelsAisleTableBase);
            var prepPalModelsAisleMappingBase = new TableMappingBase<ColumnMappingBase>(aisle, prepPalModelsAisleTableBase, true);
            prepPalModelsAisleTableBase.AddTypeMapping(prepPalModelsAisleMappingBase, false);
            defaultTableMappings.Add(prepPalModelsAisleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aisleIdColumnBase, aisle.FindProperty("AisleId")!, prepPalModelsAisleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aisleNameColumnBase, aisle.FindProperty("AisleName")!, prepPalModelsAisleMappingBase);

            var tableMappings = new List<TableMapping>();
            aisle.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var aislesTable = new Table("Aisles", null, relationalModel);
            var aisleIdColumn = new Column("AisleId", "integer", aislesTable);
            aislesTable.Columns.Add("AisleId", aisleIdColumn);
            aisleIdColumn.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var aisleNameColumn = new Column("AisleName", "text", aislesTable);
            aislesTable.Columns.Add("AisleName", aisleNameColumn);
            var pK_Aisles = new UniqueConstraint("PK_Aisles", aislesTable, new[] { aisleIdColumn });
            aislesTable.PrimaryKey = pK_Aisles;
            var pK_AislesUc = RelationalModel.GetKey(this,
                "PrepPal.Models.Aisle",
                new[] { "AisleId" });
            pK_Aisles.MappedKeys.Add(pK_AislesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AislesUc).Add(pK_Aisles);
            aislesTable.UniqueConstraints.Add("PK_Aisles", pK_Aisles);
            relationalModel.Tables.Add(("Aisles", null), aislesTable);
            var aislesTableMapping = new TableMapping(aisle, aislesTable, true);
            aislesTable.AddTypeMapping(aislesTableMapping, false);
            tableMappings.Add(aislesTableMapping);
            RelationalModel.CreateColumnMapping(aisleIdColumn, aisle.FindProperty("AisleId")!, aislesTableMapping);
            RelationalModel.CreateColumnMapping(aisleNameColumn, aisle.FindProperty("AisleName")!, aislesTableMapping);

            var ingredient = FindEntityType("PrepPal.Models.Ingredient")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            ingredient.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var prepPalModelsIngredientTableBase = new TableBase("PrepPal.Models.Ingredient", null, relationalModel);
            var aisleColumnBase = new ColumnBase<ColumnMappingBase>("Aisle", "text", prepPalModelsIngredientTableBase);
            prepPalModelsIngredientTableBase.Columns.Add("Aisle", aisleColumnBase);
            var ingredientIdColumnBase = new ColumnBase<ColumnMappingBase>("IngredientId", "text", prepPalModelsIngredientTableBase);
            prepPalModelsIngredientTableBase.Columns.Add("IngredientId", ingredientIdColumnBase);
            var isSelectedColumnBase = new ColumnBase<ColumnMappingBase>("IsSelected", "boolean", prepPalModelsIngredientTableBase);
            prepPalModelsIngredientTableBase.Columns.Add("IsSelected", isSelectedColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "text", prepPalModelsIngredientTableBase);
            prepPalModelsIngredientTableBase.Columns.Add("Name", nameColumnBase);
            var storageLocationColumnBase = new ColumnBase<ColumnMappingBase>("StorageLocation", "text", prepPalModelsIngredientTableBase);
            prepPalModelsIngredientTableBase.Columns.Add("StorageLocation", storageLocationColumnBase);
            relationalModel.DefaultTables.Add("PrepPal.Models.Ingredient", prepPalModelsIngredientTableBase);
            var prepPalModelsIngredientMappingBase = new TableMappingBase<ColumnMappingBase>(ingredient, prepPalModelsIngredientTableBase, true);
            prepPalModelsIngredientTableBase.AddTypeMapping(prepPalModelsIngredientMappingBase, false);
            defaultTableMappings0.Add(prepPalModelsIngredientMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)ingredientIdColumnBase, ingredient.FindProperty("IngredientId")!, prepPalModelsIngredientMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aisleColumnBase, ingredient.FindProperty("Aisle")!, prepPalModelsIngredientMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isSelectedColumnBase, ingredient.FindProperty("IsSelected")!, prepPalModelsIngredientMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, ingredient.FindProperty("Name")!, prepPalModelsIngredientMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)storageLocationColumnBase, ingredient.FindProperty("StorageLocation")!, prepPalModelsIngredientMappingBase);

            var tableMappings0 = new List<TableMapping>();
            ingredient.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var ingredientsTable = new Table("Ingredients", null, relationalModel);
            var ingredientIdColumn = new Column("IngredientId", "text", ingredientsTable);
            ingredientsTable.Columns.Add("IngredientId", ingredientIdColumn);
            var aisleColumn = new Column("Aisle", "text", ingredientsTable);
            ingredientsTable.Columns.Add("Aisle", aisleColumn);
            var isSelectedColumn = new Column("IsSelected", "boolean", ingredientsTable);
            ingredientsTable.Columns.Add("IsSelected", isSelectedColumn);
            var nameColumn = new Column("Name", "text", ingredientsTable);
            ingredientsTable.Columns.Add("Name", nameColumn);
            var storageLocationColumn = new Column("StorageLocation", "text", ingredientsTable);
            ingredientsTable.Columns.Add("StorageLocation", storageLocationColumn);
            var pK_Ingredients = new UniqueConstraint("PK_Ingredients", ingredientsTable, new[] { ingredientIdColumn });
            ingredientsTable.PrimaryKey = pK_Ingredients;
            var pK_IngredientsUc = RelationalModel.GetKey(this,
                "PrepPal.Models.Ingredient",
                new[] { "IngredientId" });
            pK_Ingredients.MappedKeys.Add(pK_IngredientsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_IngredientsUc).Add(pK_Ingredients);
            ingredientsTable.UniqueConstraints.Add("PK_Ingredients", pK_Ingredients);
            relationalModel.Tables.Add(("Ingredients", null), ingredientsTable);
            var ingredientsTableMapping = new TableMapping(ingredient, ingredientsTable, true);
            ingredientsTable.AddTypeMapping(ingredientsTableMapping, false);
            tableMappings0.Add(ingredientsTableMapping);
            RelationalModel.CreateColumnMapping(ingredientIdColumn, ingredient.FindProperty("IngredientId")!, ingredientsTableMapping);
            RelationalModel.CreateColumnMapping(aisleColumn, ingredient.FindProperty("Aisle")!, ingredientsTableMapping);
            RelationalModel.CreateColumnMapping(isSelectedColumn, ingredient.FindProperty("IsSelected")!, ingredientsTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, ingredient.FindProperty("Name")!, ingredientsTableMapping);
            RelationalModel.CreateColumnMapping(storageLocationColumn, ingredient.FindProperty("StorageLocation")!, ingredientsTableMapping);

            var instruction = FindEntityType("PrepPal.Models.Instruction")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            instruction.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var prepPalModelsInstructionTableBase = new TableBase("PrepPal.Models.Instruction", null, relationalModel);
            var descriptionColumnBase = new ColumnBase<ColumnMappingBase>("Description", "text", prepPalModelsInstructionTableBase);
            prepPalModelsInstructionTableBase.Columns.Add("Description", descriptionColumnBase);
            var instructionIdColumnBase = new ColumnBase<ColumnMappingBase>("InstructionId", "integer", prepPalModelsInstructionTableBase);
            prepPalModelsInstructionTableBase.Columns.Add("InstructionId", instructionIdColumnBase);
            var isCompletedColumnBase = new ColumnBase<ColumnMappingBase>("IsCompleted", "boolean", prepPalModelsInstructionTableBase);
            prepPalModelsInstructionTableBase.Columns.Add("IsCompleted", isCompletedColumnBase);
            var recipeIdColumnBase = new ColumnBase<ColumnMappingBase>("RecipeId", "integer", prepPalModelsInstructionTableBase);
            prepPalModelsInstructionTableBase.Columns.Add("RecipeId", recipeIdColumnBase);
            var stepNumberColumnBase = new ColumnBase<ColumnMappingBase>("StepNumber", "integer", prepPalModelsInstructionTableBase);
            prepPalModelsInstructionTableBase.Columns.Add("StepNumber", stepNumberColumnBase);
            relationalModel.DefaultTables.Add("PrepPal.Models.Instruction", prepPalModelsInstructionTableBase);
            var prepPalModelsInstructionMappingBase = new TableMappingBase<ColumnMappingBase>(instruction, prepPalModelsInstructionTableBase, true);
            prepPalModelsInstructionTableBase.AddTypeMapping(prepPalModelsInstructionMappingBase, false);
            defaultTableMappings1.Add(prepPalModelsInstructionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)instructionIdColumnBase, instruction.FindProperty("InstructionId")!, prepPalModelsInstructionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase, instruction.FindProperty("Description")!, prepPalModelsInstructionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isCompletedColumnBase, instruction.FindProperty("IsCompleted")!, prepPalModelsInstructionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)recipeIdColumnBase, instruction.FindProperty("RecipeId")!, prepPalModelsInstructionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)stepNumberColumnBase, instruction.FindProperty("StepNumber")!, prepPalModelsInstructionMappingBase);

            var tableMappings1 = new List<TableMapping>();
            instruction.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var instructionsTable = new Table("Instructions", null, relationalModel);
            var instructionIdColumn = new Column("InstructionId", "integer", instructionsTable);
            instructionsTable.Columns.Add("InstructionId", instructionIdColumn);
            instructionIdColumn.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var descriptionColumn = new Column("Description", "text", instructionsTable);
            instructionsTable.Columns.Add("Description", descriptionColumn);
            var isCompletedColumn = new Column("IsCompleted", "boolean", instructionsTable);
            instructionsTable.Columns.Add("IsCompleted", isCompletedColumn);
            var recipeIdColumn = new Column("RecipeId", "integer", instructionsTable);
            instructionsTable.Columns.Add("RecipeId", recipeIdColumn);
            var stepNumberColumn = new Column("StepNumber", "integer", instructionsTable);
            instructionsTable.Columns.Add("StepNumber", stepNumberColumn);
            var pK_Instructions = new UniqueConstraint("PK_Instructions", instructionsTable, new[] { instructionIdColumn });
            instructionsTable.PrimaryKey = pK_Instructions;
            var pK_InstructionsUc = RelationalModel.GetKey(this,
                "PrepPal.Models.Instruction",
                new[] { "InstructionId" });
            pK_Instructions.MappedKeys.Add(pK_InstructionsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_InstructionsUc).Add(pK_Instructions);
            instructionsTable.UniqueConstraints.Add("PK_Instructions", pK_Instructions);
            var iX_Instructions_RecipeId = new TableIndex(
            "IX_Instructions_RecipeId", instructionsTable, new[] { recipeIdColumn }, false);
            var iX_Instructions_RecipeIdIx = RelationalModel.GetIndex(this,
                "PrepPal.Models.Instruction",
                new[] { "RecipeId" });
            iX_Instructions_RecipeId.MappedIndexes.Add(iX_Instructions_RecipeIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Instructions_RecipeIdIx).Add(iX_Instructions_RecipeId);
            instructionsTable.Indexes.Add("IX_Instructions_RecipeId", iX_Instructions_RecipeId);
            relationalModel.Tables.Add(("Instructions", null), instructionsTable);
            var instructionsTableMapping = new TableMapping(instruction, instructionsTable, true);
            instructionsTable.AddTypeMapping(instructionsTableMapping, false);
            tableMappings1.Add(instructionsTableMapping);
            RelationalModel.CreateColumnMapping(instructionIdColumn, instruction.FindProperty("InstructionId")!, instructionsTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn, instruction.FindProperty("Description")!, instructionsTableMapping);
            RelationalModel.CreateColumnMapping(isCompletedColumn, instruction.FindProperty("IsCompleted")!, instructionsTableMapping);
            RelationalModel.CreateColumnMapping(recipeIdColumn, instruction.FindProperty("RecipeId")!, instructionsTableMapping);
            RelationalModel.CreateColumnMapping(stepNumberColumn, instruction.FindProperty("StepNumber")!, instructionsTableMapping);

            var recipe = FindEntityType("PrepPal.Models.Recipe")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            recipe.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var prepPalModelsRecipeTableBase = new TableBase("PrepPal.Models.Recipe", null, relationalModel);
            var categoryColumnBase = new ColumnBase<ColumnMappingBase>("Category", "text", prepPalModelsRecipeTableBase);
            prepPalModelsRecipeTableBase.Columns.Add("Category", categoryColumnBase);
            var cookTimeColumnBase = new ColumnBase<ColumnMappingBase>("CookTime", "integer", prepPalModelsRecipeTableBase);
            prepPalModelsRecipeTableBase.Columns.Add("CookTime", cookTimeColumnBase);
            var imageURLColumnBase = new ColumnBase<ColumnMappingBase>("ImageURL", "text", prepPalModelsRecipeTableBase);
            prepPalModelsRecipeTableBase.Columns.Add("ImageURL", imageURLColumnBase);
            var isFavoriteColumnBase = new ColumnBase<ColumnMappingBase>("IsFavorite", "boolean", prepPalModelsRecipeTableBase);
            prepPalModelsRecipeTableBase.Columns.Add("IsFavorite", isFavoriteColumnBase);
            var nameColumnBase0 = new ColumnBase<ColumnMappingBase>("Name", "text", prepPalModelsRecipeTableBase);
            prepPalModelsRecipeTableBase.Columns.Add("Name", nameColumnBase0);
            var prepTimeColumnBase = new ColumnBase<ColumnMappingBase>("PrepTime", "integer", prepPalModelsRecipeTableBase);
            prepPalModelsRecipeTableBase.Columns.Add("PrepTime", prepTimeColumnBase);
            var recipeIdColumnBase0 = new ColumnBase<ColumnMappingBase>("RecipeId", "integer", prepPalModelsRecipeTableBase);
            prepPalModelsRecipeTableBase.Columns.Add("RecipeId", recipeIdColumnBase0);
            var servingsColumnBase = new ColumnBase<ColumnMappingBase>("Servings", "integer", prepPalModelsRecipeTableBase);
            prepPalModelsRecipeTableBase.Columns.Add("Servings", servingsColumnBase);
            var sourceColumnBase = new ColumnBase<ColumnMappingBase>("Source", "text", prepPalModelsRecipeTableBase);
            prepPalModelsRecipeTableBase.Columns.Add("Source", sourceColumnBase);
            var sourceURLColumnBase = new ColumnBase<ColumnMappingBase>("SourceURL", "text", prepPalModelsRecipeTableBase);
            prepPalModelsRecipeTableBase.Columns.Add("SourceURL", sourceURLColumnBase);
            var totalTimeColumnBase = new ColumnBase<ColumnMappingBase>("TotalTime", "integer", prepPalModelsRecipeTableBase);
            prepPalModelsRecipeTableBase.Columns.Add("TotalTime", totalTimeColumnBase);
            relationalModel.DefaultTables.Add("PrepPal.Models.Recipe", prepPalModelsRecipeTableBase);
            var prepPalModelsRecipeMappingBase = new TableMappingBase<ColumnMappingBase>(recipe, prepPalModelsRecipeTableBase, true);
            prepPalModelsRecipeTableBase.AddTypeMapping(prepPalModelsRecipeMappingBase, false);
            defaultTableMappings2.Add(prepPalModelsRecipeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)recipeIdColumnBase0, recipe.FindProperty("RecipeId")!, prepPalModelsRecipeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)categoryColumnBase, recipe.FindProperty("Category")!, prepPalModelsRecipeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)cookTimeColumnBase, recipe.FindProperty("CookTime")!, prepPalModelsRecipeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)imageURLColumnBase, recipe.FindProperty("ImageURL")!, prepPalModelsRecipeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isFavoriteColumnBase, recipe.FindProperty("IsFavorite")!, prepPalModelsRecipeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase0, recipe.FindProperty("Name")!, prepPalModelsRecipeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)prepTimeColumnBase, recipe.FindProperty("PrepTime")!, prepPalModelsRecipeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)servingsColumnBase, recipe.FindProperty("Servings")!, prepPalModelsRecipeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sourceColumnBase, recipe.FindProperty("Source")!, prepPalModelsRecipeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sourceURLColumnBase, recipe.FindProperty("SourceURL")!, prepPalModelsRecipeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)totalTimeColumnBase, recipe.FindProperty("TotalTime")!, prepPalModelsRecipeMappingBase);

            var tableMappings2 = new List<TableMapping>();
            recipe.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var recipesTable = new Table("Recipes", null, relationalModel);
            var recipeIdColumn0 = new Column("RecipeId", "integer", recipesTable);
            recipesTable.Columns.Add("RecipeId", recipeIdColumn0);
            recipeIdColumn0.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var categoryColumn = new Column("Category", "text", recipesTable);
            recipesTable.Columns.Add("Category", categoryColumn);
            var cookTimeColumn = new Column("CookTime", "integer", recipesTable);
            recipesTable.Columns.Add("CookTime", cookTimeColumn);
            var imageURLColumn = new Column("ImageURL", "text", recipesTable);
            recipesTable.Columns.Add("ImageURL", imageURLColumn);
            var isFavoriteColumn = new Column("IsFavorite", "boolean", recipesTable);
            recipesTable.Columns.Add("IsFavorite", isFavoriteColumn);
            var nameColumn0 = new Column("Name", "text", recipesTable);
            recipesTable.Columns.Add("Name", nameColumn0);
            var prepTimeColumn = new Column("PrepTime", "integer", recipesTable);
            recipesTable.Columns.Add("PrepTime", prepTimeColumn);
            var servingsColumn = new Column("Servings", "integer", recipesTable);
            recipesTable.Columns.Add("Servings", servingsColumn);
            var sourceColumn = new Column("Source", "text", recipesTable);
            recipesTable.Columns.Add("Source", sourceColumn);
            var sourceURLColumn = new Column("SourceURL", "text", recipesTable);
            recipesTable.Columns.Add("SourceURL", sourceURLColumn);
            var totalTimeColumn = new Column("TotalTime", "integer", recipesTable);
            recipesTable.Columns.Add("TotalTime", totalTimeColumn);
            var pK_Recipes = new UniqueConstraint("PK_Recipes", recipesTable, new[] { recipeIdColumn0 });
            recipesTable.PrimaryKey = pK_Recipes;
            var pK_RecipesUc = RelationalModel.GetKey(this,
                "PrepPal.Models.Recipe",
                new[] { "RecipeId" });
            pK_Recipes.MappedKeys.Add(pK_RecipesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_RecipesUc).Add(pK_Recipes);
            recipesTable.UniqueConstraints.Add("PK_Recipes", pK_Recipes);
            relationalModel.Tables.Add(("Recipes", null), recipesTable);
            var recipesTableMapping = new TableMapping(recipe, recipesTable, true);
            recipesTable.AddTypeMapping(recipesTableMapping, false);
            tableMappings2.Add(recipesTableMapping);
            RelationalModel.CreateColumnMapping(recipeIdColumn0, recipe.FindProperty("RecipeId")!, recipesTableMapping);
            RelationalModel.CreateColumnMapping(categoryColumn, recipe.FindProperty("Category")!, recipesTableMapping);
            RelationalModel.CreateColumnMapping(cookTimeColumn, recipe.FindProperty("CookTime")!, recipesTableMapping);
            RelationalModel.CreateColumnMapping(imageURLColumn, recipe.FindProperty("ImageURL")!, recipesTableMapping);
            RelationalModel.CreateColumnMapping(isFavoriteColumn, recipe.FindProperty("IsFavorite")!, recipesTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn0, recipe.FindProperty("Name")!, recipesTableMapping);
            RelationalModel.CreateColumnMapping(prepTimeColumn, recipe.FindProperty("PrepTime")!, recipesTableMapping);
            RelationalModel.CreateColumnMapping(servingsColumn, recipe.FindProperty("Servings")!, recipesTableMapping);
            RelationalModel.CreateColumnMapping(sourceColumn, recipe.FindProperty("Source")!, recipesTableMapping);
            RelationalModel.CreateColumnMapping(sourceURLColumn, recipe.FindProperty("SourceURL")!, recipesTableMapping);
            RelationalModel.CreateColumnMapping(totalTimeColumn, recipe.FindProperty("TotalTime")!, recipesTableMapping);

            var recipeCategory = FindEntityType("PrepPal.Models.RecipeCategory")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            recipeCategory.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var prepPalModelsRecipeCategoryTableBase = new TableBase("PrepPal.Models.RecipeCategory", null, relationalModel);
            var categoryIdColumnBase = new ColumnBase<ColumnMappingBase>("CategoryId", "integer", prepPalModelsRecipeCategoryTableBase);
            prepPalModelsRecipeCategoryTableBase.Columns.Add("CategoryId", categoryIdColumnBase);
            var categoryNameColumnBase = new ColumnBase<ColumnMappingBase>("CategoryName", "text", prepPalModelsRecipeCategoryTableBase);
            prepPalModelsRecipeCategoryTableBase.Columns.Add("CategoryName", categoryNameColumnBase);
            var recipeIdColumnBase1 = new ColumnBase<ColumnMappingBase>("RecipeId", "integer", prepPalModelsRecipeCategoryTableBase);
            prepPalModelsRecipeCategoryTableBase.Columns.Add("RecipeId", recipeIdColumnBase1);
            relationalModel.DefaultTables.Add("PrepPal.Models.RecipeCategory", prepPalModelsRecipeCategoryTableBase);
            var prepPalModelsRecipeCategoryMappingBase = new TableMappingBase<ColumnMappingBase>(recipeCategory, prepPalModelsRecipeCategoryTableBase, true);
            prepPalModelsRecipeCategoryTableBase.AddTypeMapping(prepPalModelsRecipeCategoryMappingBase, false);
            defaultTableMappings3.Add(prepPalModelsRecipeCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)categoryIdColumnBase, recipeCategory.FindProperty("CategoryId")!, prepPalModelsRecipeCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)categoryNameColumnBase, recipeCategory.FindProperty("CategoryName")!, prepPalModelsRecipeCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)recipeIdColumnBase1, recipeCategory.FindProperty("RecipeId")!, prepPalModelsRecipeCategoryMappingBase);

            var tableMappings3 = new List<TableMapping>();
            recipeCategory.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var recipeCategoriesTable = new Table("RecipeCategories", null, relationalModel);
            var categoryIdColumn = new Column("CategoryId", "integer", recipeCategoriesTable);
            recipeCategoriesTable.Columns.Add("CategoryId", categoryIdColumn);
            categoryIdColumn.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var categoryNameColumn = new Column("CategoryName", "text", recipeCategoriesTable);
            recipeCategoriesTable.Columns.Add("CategoryName", categoryNameColumn);
            var recipeIdColumn1 = new Column("RecipeId", "integer", recipeCategoriesTable);
            recipeCategoriesTable.Columns.Add("RecipeId", recipeIdColumn1);
            var pK_RecipeCategories = new UniqueConstraint("PK_RecipeCategories", recipeCategoriesTable, new[] { categoryIdColumn });
            recipeCategoriesTable.PrimaryKey = pK_RecipeCategories;
            var pK_RecipeCategoriesUc = RelationalModel.GetKey(this,
                "PrepPal.Models.RecipeCategory",
                new[] { "CategoryId" });
            pK_RecipeCategories.MappedKeys.Add(pK_RecipeCategoriesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_RecipeCategoriesUc).Add(pK_RecipeCategories);
            recipeCategoriesTable.UniqueConstraints.Add("PK_RecipeCategories", pK_RecipeCategories);
            var iX_RecipeCategories_RecipeId = new TableIndex(
            "IX_RecipeCategories_RecipeId", recipeCategoriesTable, new[] { recipeIdColumn1 }, false);
            var iX_RecipeCategories_RecipeIdIx = RelationalModel.GetIndex(this,
                "PrepPal.Models.RecipeCategory",
                new[] { "RecipeId" });
            iX_RecipeCategories_RecipeId.MappedIndexes.Add(iX_RecipeCategories_RecipeIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_RecipeCategories_RecipeIdIx).Add(iX_RecipeCategories_RecipeId);
            recipeCategoriesTable.Indexes.Add("IX_RecipeCategories_RecipeId", iX_RecipeCategories_RecipeId);
            relationalModel.Tables.Add(("RecipeCategories", null), recipeCategoriesTable);
            var recipeCategoriesTableMapping = new TableMapping(recipeCategory, recipeCategoriesTable, true);
            recipeCategoriesTable.AddTypeMapping(recipeCategoriesTableMapping, false);
            tableMappings3.Add(recipeCategoriesTableMapping);
            RelationalModel.CreateColumnMapping(categoryIdColumn, recipeCategory.FindProperty("CategoryId")!, recipeCategoriesTableMapping);
            RelationalModel.CreateColumnMapping(categoryNameColumn, recipeCategory.FindProperty("CategoryName")!, recipeCategoriesTableMapping);
            RelationalModel.CreateColumnMapping(recipeIdColumn1, recipeCategory.FindProperty("RecipeId")!, recipeCategoriesTableMapping);

            var recipeIngredient = FindEntityType("PrepPal.Models.RecipeIngredient")!;

            var defaultTableMappings4 = new List<TableMappingBase<ColumnMappingBase>>();
            recipeIngredient.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings4);
            var prepPalModelsRecipeIngredientTableBase = new TableBase("PrepPal.Models.RecipeIngredient", null, relationalModel);
            var ingredientIdColumnBase0 = new ColumnBase<ColumnMappingBase>("IngredientId", "integer", prepPalModelsRecipeIngredientTableBase);
            prepPalModelsRecipeIngredientTableBase.Columns.Add("IngredientId", ingredientIdColumnBase0);
            var ingredientNameColumnBase = new ColumnBase<ColumnMappingBase>("IngredientName", "text", prepPalModelsRecipeIngredientTableBase);
            prepPalModelsRecipeIngredientTableBase.Columns.Add("IngredientName", ingredientNameColumnBase);
            var isSelectedColumnBase0 = new ColumnBase<ColumnMappingBase>("IsSelected", "boolean", prepPalModelsRecipeIngredientTableBase);
            prepPalModelsRecipeIngredientTableBase.Columns.Add("IsSelected", isSelectedColumnBase0);
            var quantityColumnBase = new ColumnBase<ColumnMappingBase>("Quantity", "numeric", prepPalModelsRecipeIngredientTableBase);
            prepPalModelsRecipeIngredientTableBase.Columns.Add("Quantity", quantityColumnBase);
            var recipeIdColumnBase2 = new ColumnBase<ColumnMappingBase>("RecipeId", "integer", prepPalModelsRecipeIngredientTableBase);
            prepPalModelsRecipeIngredientTableBase.Columns.Add("RecipeId", recipeIdColumnBase2);
            var recipeIngredientIdColumnBase = new ColumnBase<ColumnMappingBase>("RecipeIngredientId", "integer", prepPalModelsRecipeIngredientTableBase);
            prepPalModelsRecipeIngredientTableBase.Columns.Add("RecipeIngredientId", recipeIngredientIdColumnBase);
            var unitColumnBase = new ColumnBase<ColumnMappingBase>("Unit", "text", prepPalModelsRecipeIngredientTableBase);
            prepPalModelsRecipeIngredientTableBase.Columns.Add("Unit", unitColumnBase);
            relationalModel.DefaultTables.Add("PrepPal.Models.RecipeIngredient", prepPalModelsRecipeIngredientTableBase);
            var prepPalModelsRecipeIngredientMappingBase = new TableMappingBase<ColumnMappingBase>(recipeIngredient, prepPalModelsRecipeIngredientTableBase, true);
            prepPalModelsRecipeIngredientTableBase.AddTypeMapping(prepPalModelsRecipeIngredientMappingBase, false);
            defaultTableMappings4.Add(prepPalModelsRecipeIngredientMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)recipeIngredientIdColumnBase, recipeIngredient.FindProperty("RecipeIngredientId")!, prepPalModelsRecipeIngredientMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)ingredientIdColumnBase0, recipeIngredient.FindProperty("IngredientId")!, prepPalModelsRecipeIngredientMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)ingredientNameColumnBase, recipeIngredient.FindProperty("IngredientName")!, prepPalModelsRecipeIngredientMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isSelectedColumnBase0, recipeIngredient.FindProperty("IsSelected")!, prepPalModelsRecipeIngredientMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)quantityColumnBase, recipeIngredient.FindProperty("Quantity")!, prepPalModelsRecipeIngredientMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)recipeIdColumnBase2, recipeIngredient.FindProperty("RecipeId")!, prepPalModelsRecipeIngredientMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)unitColumnBase, recipeIngredient.FindProperty("Unit")!, prepPalModelsRecipeIngredientMappingBase);

            var tableMappings4 = new List<TableMapping>();
            recipeIngredient.SetRuntimeAnnotation("Relational:TableMappings", tableMappings4);
            var recipeIngredientsTable = new Table("RecipeIngredients", null, relationalModel);
            var recipeIngredientIdColumn = new Column("RecipeIngredientId", "integer", recipeIngredientsTable);
            recipeIngredientsTable.Columns.Add("RecipeIngredientId", recipeIngredientIdColumn);
            recipeIngredientIdColumn.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var ingredientIdColumn0 = new Column("IngredientId", "integer", recipeIngredientsTable);
            recipeIngredientsTable.Columns.Add("IngredientId", ingredientIdColumn0);
            var ingredientNameColumn = new Column("IngredientName", "text", recipeIngredientsTable);
            recipeIngredientsTable.Columns.Add("IngredientName", ingredientNameColumn);
            var isSelectedColumn0 = new Column("IsSelected", "boolean", recipeIngredientsTable);
            recipeIngredientsTable.Columns.Add("IsSelected", isSelectedColumn0);
            var quantityColumn = new Column("Quantity", "numeric", recipeIngredientsTable);
            recipeIngredientsTable.Columns.Add("Quantity", quantityColumn);
            var recipeIdColumn2 = new Column("RecipeId", "integer", recipeIngredientsTable);
            recipeIngredientsTable.Columns.Add("RecipeId", recipeIdColumn2);
            var unitColumn = new Column("Unit", "text", recipeIngredientsTable);
            recipeIngredientsTable.Columns.Add("Unit", unitColumn);
            var pK_RecipeIngredients = new UniqueConstraint("PK_RecipeIngredients", recipeIngredientsTable, new[] { recipeIngredientIdColumn });
            recipeIngredientsTable.PrimaryKey = pK_RecipeIngredients;
            var pK_RecipeIngredientsUc = RelationalModel.GetKey(this,
                "PrepPal.Models.RecipeIngredient",
                new[] { "RecipeIngredientId" });
            pK_RecipeIngredients.MappedKeys.Add(pK_RecipeIngredientsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_RecipeIngredientsUc).Add(pK_RecipeIngredients);
            recipeIngredientsTable.UniqueConstraints.Add("PK_RecipeIngredients", pK_RecipeIngredients);
            var iX_RecipeIngredients_RecipeId = new TableIndex(
            "IX_RecipeIngredients_RecipeId", recipeIngredientsTable, new[] { recipeIdColumn2 }, false);
            var iX_RecipeIngredients_RecipeIdIx = RelationalModel.GetIndex(this,
                "PrepPal.Models.RecipeIngredient",
                new[] { "RecipeId" });
            iX_RecipeIngredients_RecipeId.MappedIndexes.Add(iX_RecipeIngredients_RecipeIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_RecipeIngredients_RecipeIdIx).Add(iX_RecipeIngredients_RecipeId);
            recipeIngredientsTable.Indexes.Add("IX_RecipeIngredients_RecipeId", iX_RecipeIngredients_RecipeId);
            relationalModel.Tables.Add(("RecipeIngredients", null), recipeIngredientsTable);
            var recipeIngredientsTableMapping = new TableMapping(recipeIngredient, recipeIngredientsTable, true);
            recipeIngredientsTable.AddTypeMapping(recipeIngredientsTableMapping, false);
            tableMappings4.Add(recipeIngredientsTableMapping);
            RelationalModel.CreateColumnMapping(recipeIngredientIdColumn, recipeIngredient.FindProperty("RecipeIngredientId")!, recipeIngredientsTableMapping);
            RelationalModel.CreateColumnMapping(ingredientIdColumn0, recipeIngredient.FindProperty("IngredientId")!, recipeIngredientsTableMapping);
            RelationalModel.CreateColumnMapping(ingredientNameColumn, recipeIngredient.FindProperty("IngredientName")!, recipeIngredientsTableMapping);
            RelationalModel.CreateColumnMapping(isSelectedColumn0, recipeIngredient.FindProperty("IsSelected")!, recipeIngredientsTableMapping);
            RelationalModel.CreateColumnMapping(quantityColumn, recipeIngredient.FindProperty("Quantity")!, recipeIngredientsTableMapping);
            RelationalModel.CreateColumnMapping(recipeIdColumn2, recipeIngredient.FindProperty("RecipeId")!, recipeIngredientsTableMapping);
            RelationalModel.CreateColumnMapping(unitColumn, recipeIngredient.FindProperty("Unit")!, recipeIngredientsTableMapping);

            var storageLocation = FindEntityType("PrepPal.Models.StorageLocation")!;

            var defaultTableMappings5 = new List<TableMappingBase<ColumnMappingBase>>();
            storageLocation.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings5);
            var prepPalModelsStorageLocationTableBase = new TableBase("PrepPal.Models.StorageLocation", null, relationalModel);
            var storageLocationIdColumnBase = new ColumnBase<ColumnMappingBase>("StorageLocationId", "integer", prepPalModelsStorageLocationTableBase);
            prepPalModelsStorageLocationTableBase.Columns.Add("StorageLocationId", storageLocationIdColumnBase);
            var storageLocationNameColumnBase = new ColumnBase<ColumnMappingBase>("StorageLocationName", "text", prepPalModelsStorageLocationTableBase);
            prepPalModelsStorageLocationTableBase.Columns.Add("StorageLocationName", storageLocationNameColumnBase);
            relationalModel.DefaultTables.Add("PrepPal.Models.StorageLocation", prepPalModelsStorageLocationTableBase);
            var prepPalModelsStorageLocationMappingBase = new TableMappingBase<ColumnMappingBase>(storageLocation, prepPalModelsStorageLocationTableBase, true);
            prepPalModelsStorageLocationTableBase.AddTypeMapping(prepPalModelsStorageLocationMappingBase, false);
            defaultTableMappings5.Add(prepPalModelsStorageLocationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)storageLocationIdColumnBase, storageLocation.FindProperty("StorageLocationId")!, prepPalModelsStorageLocationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)storageLocationNameColumnBase, storageLocation.FindProperty("StorageLocationName")!, prepPalModelsStorageLocationMappingBase);

            var tableMappings5 = new List<TableMapping>();
            storageLocation.SetRuntimeAnnotation("Relational:TableMappings", tableMappings5);
            var storageLocationsTable = new Table("StorageLocations", null, relationalModel);
            var storageLocationIdColumn = new Column("StorageLocationId", "integer", storageLocationsTable);
            storageLocationsTable.Columns.Add("StorageLocationId", storageLocationIdColumn);
            storageLocationIdColumn.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var storageLocationNameColumn = new Column("StorageLocationName", "text", storageLocationsTable);
            storageLocationsTable.Columns.Add("StorageLocationName", storageLocationNameColumn);
            var pK_StorageLocations = new UniqueConstraint("PK_StorageLocations", storageLocationsTable, new[] { storageLocationIdColumn });
            storageLocationsTable.PrimaryKey = pK_StorageLocations;
            var pK_StorageLocationsUc = RelationalModel.GetKey(this,
                "PrepPal.Models.StorageLocation",
                new[] { "StorageLocationId" });
            pK_StorageLocations.MappedKeys.Add(pK_StorageLocationsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_StorageLocationsUc).Add(pK_StorageLocations);
            storageLocationsTable.UniqueConstraints.Add("PK_StorageLocations", pK_StorageLocations);
            relationalModel.Tables.Add(("StorageLocations", null), storageLocationsTable);
            var storageLocationsTableMapping = new TableMapping(storageLocation, storageLocationsTable, true);
            storageLocationsTable.AddTypeMapping(storageLocationsTableMapping, false);
            tableMappings5.Add(storageLocationsTableMapping);
            RelationalModel.CreateColumnMapping(storageLocationIdColumn, storageLocation.FindProperty("StorageLocationId")!, storageLocationsTableMapping);
            RelationalModel.CreateColumnMapping(storageLocationNameColumn, storageLocation.FindProperty("StorageLocationName")!, storageLocationsTableMapping);

            var unitOfMeasure = FindEntityType("PrepPal.Models.UnitOfMeasure")!;

            var defaultTableMappings6 = new List<TableMappingBase<ColumnMappingBase>>();
            unitOfMeasure.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings6);
            var prepPalModelsUnitOfMeasureTableBase = new TableBase("PrepPal.Models.UnitOfMeasure", null, relationalModel);
            var unitAbbreviationColumnBase = new ColumnBase<ColumnMappingBase>("UnitAbbreviation", "text", prepPalModelsUnitOfMeasureTableBase);
            prepPalModelsUnitOfMeasureTableBase.Columns.Add("UnitAbbreviation", unitAbbreviationColumnBase);
            var unitIdColumnBase = new ColumnBase<ColumnMappingBase>("UnitId", "integer", prepPalModelsUnitOfMeasureTableBase);
            prepPalModelsUnitOfMeasureTableBase.Columns.Add("UnitId", unitIdColumnBase);
            var unitNameColumnBase = new ColumnBase<ColumnMappingBase>("UnitName", "text", prepPalModelsUnitOfMeasureTableBase);
            prepPalModelsUnitOfMeasureTableBase.Columns.Add("UnitName", unitNameColumnBase);
            relationalModel.DefaultTables.Add("PrepPal.Models.UnitOfMeasure", prepPalModelsUnitOfMeasureTableBase);
            var prepPalModelsUnitOfMeasureMappingBase = new TableMappingBase<ColumnMappingBase>(unitOfMeasure, prepPalModelsUnitOfMeasureTableBase, true);
            prepPalModelsUnitOfMeasureTableBase.AddTypeMapping(prepPalModelsUnitOfMeasureMappingBase, false);
            defaultTableMappings6.Add(prepPalModelsUnitOfMeasureMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)unitIdColumnBase, unitOfMeasure.FindProperty("UnitId")!, prepPalModelsUnitOfMeasureMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)unitAbbreviationColumnBase, unitOfMeasure.FindProperty("UnitAbbreviation")!, prepPalModelsUnitOfMeasureMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)unitNameColumnBase, unitOfMeasure.FindProperty("UnitName")!, prepPalModelsUnitOfMeasureMappingBase);

            var tableMappings6 = new List<TableMapping>();
            unitOfMeasure.SetRuntimeAnnotation("Relational:TableMappings", tableMappings6);
            var unitsOfMeasureTable = new Table("UnitsOfMeasure", null, relationalModel);
            var unitIdColumn = new Column("UnitId", "integer", unitsOfMeasureTable);
            unitsOfMeasureTable.Columns.Add("UnitId", unitIdColumn);
            unitIdColumn.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var unitAbbreviationColumn = new Column("UnitAbbreviation", "text", unitsOfMeasureTable);
            unitsOfMeasureTable.Columns.Add("UnitAbbreviation", unitAbbreviationColumn);
            var unitNameColumn = new Column("UnitName", "text", unitsOfMeasureTable);
            unitsOfMeasureTable.Columns.Add("UnitName", unitNameColumn);
            var pK_UnitsOfMeasure = new UniqueConstraint("PK_UnitsOfMeasure", unitsOfMeasureTable, new[] { unitIdColumn });
            unitsOfMeasureTable.PrimaryKey = pK_UnitsOfMeasure;
            var pK_UnitsOfMeasureUc = RelationalModel.GetKey(this,
                "PrepPal.Models.UnitOfMeasure",
                new[] { "UnitId" });
            pK_UnitsOfMeasure.MappedKeys.Add(pK_UnitsOfMeasureUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_UnitsOfMeasureUc).Add(pK_UnitsOfMeasure);
            unitsOfMeasureTable.UniqueConstraints.Add("PK_UnitsOfMeasure", pK_UnitsOfMeasure);
            relationalModel.Tables.Add(("UnitsOfMeasure", null), unitsOfMeasureTable);
            var unitsOfMeasureTableMapping = new TableMapping(unitOfMeasure, unitsOfMeasureTable, true);
            unitsOfMeasureTable.AddTypeMapping(unitsOfMeasureTableMapping, false);
            tableMappings6.Add(unitsOfMeasureTableMapping);
            RelationalModel.CreateColumnMapping(unitIdColumn, unitOfMeasure.FindProperty("UnitId")!, unitsOfMeasureTableMapping);
            RelationalModel.CreateColumnMapping(unitAbbreviationColumn, unitOfMeasure.FindProperty("UnitAbbreviation")!, unitsOfMeasureTableMapping);
            RelationalModel.CreateColumnMapping(unitNameColumn, unitOfMeasure.FindProperty("UnitName")!, unitsOfMeasureTableMapping);
            var fK_Instructions_Recipes_RecipeId = new ForeignKeyConstraint(
                "FK_Instructions_Recipes_RecipeId", instructionsTable, recipesTable,
                new[] { recipeIdColumn },
                recipesTable.FindUniqueConstraint("PK_Recipes")!, ReferentialAction.Cascade);
            var fK_Instructions_Recipes_RecipeIdFk = RelationalModel.GetForeignKey(this,
                "PrepPal.Models.Instruction",
                new[] { "RecipeId" },
                "PrepPal.Models.Recipe",
                new[] { "RecipeId" });
            fK_Instructions_Recipes_RecipeId.MappedForeignKeys.Add(fK_Instructions_Recipes_RecipeIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Instructions_Recipes_RecipeIdFk).Add(fK_Instructions_Recipes_RecipeId);
            instructionsTable.ForeignKeyConstraints.Add(fK_Instructions_Recipes_RecipeId);
            recipesTable.ReferencingForeignKeyConstraints.Add(fK_Instructions_Recipes_RecipeId);
            var fK_RecipeCategories_Recipes_RecipeId = new ForeignKeyConstraint(
                "FK_RecipeCategories_Recipes_RecipeId", recipeCategoriesTable, recipesTable,
                new[] { recipeIdColumn1 },
                recipesTable.FindUniqueConstraint("PK_Recipes")!, ReferentialAction.Cascade);
            var fK_RecipeCategories_Recipes_RecipeIdFk = RelationalModel.GetForeignKey(this,
                "PrepPal.Models.RecipeCategory",
                new[] { "RecipeId" },
                "PrepPal.Models.Recipe",
                new[] { "RecipeId" });
            fK_RecipeCategories_Recipes_RecipeId.MappedForeignKeys.Add(fK_RecipeCategories_Recipes_RecipeIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_RecipeCategories_Recipes_RecipeIdFk).Add(fK_RecipeCategories_Recipes_RecipeId);
            recipeCategoriesTable.ForeignKeyConstraints.Add(fK_RecipeCategories_Recipes_RecipeId);
            recipesTable.ReferencingForeignKeyConstraints.Add(fK_RecipeCategories_Recipes_RecipeId);
            var fK_RecipeIngredients_Recipes_RecipeId = new ForeignKeyConstraint(
                "FK_RecipeIngredients_Recipes_RecipeId", recipeIngredientsTable, recipesTable,
                new[] { recipeIdColumn2 },
                recipesTable.FindUniqueConstraint("PK_Recipes")!, ReferentialAction.Cascade);
            var fK_RecipeIngredients_Recipes_RecipeIdFk = RelationalModel.GetForeignKey(this,
                "PrepPal.Models.RecipeIngredient",
                new[] { "RecipeId" },
                "PrepPal.Models.Recipe",
                new[] { "RecipeId" });
            fK_RecipeIngredients_Recipes_RecipeId.MappedForeignKeys.Add(fK_RecipeIngredients_Recipes_RecipeIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_RecipeIngredients_Recipes_RecipeIdFk).Add(fK_RecipeIngredients_Recipes_RecipeId);
            recipeIngredientsTable.ForeignKeyConstraints.Add(fK_RecipeIngredients_Recipes_RecipeId);
            recipesTable.ReferencingForeignKeyConstraints.Add(fK_RecipeIngredients_Recipes_RecipeId);
            return relationalModel.MakeReadOnly();
        }
    }
}
